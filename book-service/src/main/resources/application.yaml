server:
  port: 8081

spring:
  application:
    name: book-service
  datasource:
    url: jdbc:postgresql://${DATASOURCE_HOST:localhost}:5432/book-service
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:password}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.PostgreSQLDialect
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/library-realm
          jwk-set-uri: http://localhost:8080/realms/library-realm/protocol/openid-connect/certs
  kafka:
    bootstrap-servers: ${KAFKA_SERVER:localhost:9092}
    security:
      protocol: plaintext
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 30
      compression-type: lz4
      properties:
        enable.idempotence: true
        max.in.flight.requests.per.connection: 5
        spring.json.add.type.headers: false

#eureka:
#  client:
#    service-url:
#      defaultZone: http://${EUREKA_HOST:localhost}:8761/eureka
#    fetch-registry: true
#    register-with-eureka: true

logging:
  config: classpath:logback-spring.xml
  level:
    root: INFO
    com.library: DEBUG
    org.springframework: INFO

# Swagger/OpenAPI Configuration
springdoc:
  api-docs:
    path: /api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    operationsSorter: method
    tagsSorter: alpha
    tryItOutEnabled: true
    filter: true
    displayRequestDuration: true
    displayOperationId: false
    defaultModelsExpandDepth: 2
    defaultModelExpandDepth: 2
    docExpansion: none
    persistAuthorization: true
    supportedSubmitMethods:
      - get
      - post
      - put
      - delete
      - patch
    oauth:
      clientId: book-service
      clientSecret: ""
      realm: library-realm
      appName: "Library Management System - Book Service"
      scopeSeparator: " "
      additionalQueryStringParams:
        audience: book-service
  show-actuator: false
  group-configs:
    - group: 'books'
      display-name: 'Book Management'
      paths-to-match: '/api/v1/books/**'
    - group: 'authors'
      display-name: 'Author Management'
      paths-to-match: '/api/v1/authors/**'
    - group: 'publishers'
      display-name: 'Publisher Management'
      paths-to-match: '/api/v1/publishers/**'
    - group: 'categories'
      display-name: 'Category Management'
      paths-to-match: '/api/v1/categories/**'
    - group: 'book-copies'
      display-name: 'Book Copy Management'
      paths-to-match: '/api/book-copies/**'

# Application Information
info:
  app:
    name: '@project.name@'
    description: '@project.description@'
    version: '@project.version@'
    encoding: '@project.build.sourceEncoding@'
    java:
      version: '@java.version@'

# Management Endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
  info:
    env:
      enabled: true

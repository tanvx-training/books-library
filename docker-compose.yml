version: '3.8'

networks:
  backend-network:
    driver: bridge

volumes:
    postgres-data:
    redis-data:
    keycloak-data:
    zookeeper-data:
services:
  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-keycloak-db.sql:/docker-entrypoint-initdb.d/init-keycloak-db.sql
    ports:
      - "5432:5432"
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 150s

  # Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:25.0.4
    container_name: keycloak
    command:
      - start-dev
    volumes:
      - keycloak-data:/opt/keycloak/data
    environment:
      - KEYCLOAK_ADMIN_USERNAME=${KEYCLOAK_ADMIN_USERNAME}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "timeout 10s bash -c '</dev/tcp/localhost/8080'"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 150s
    networks:
      - backend-network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - backend-network

  zookeeper:
    image: bitnami/zookeeper:3.9
    container_name: zookeeper
    restart: always
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_ENABLE_AUTH=no
    ports:
      - "2181:2181"
    networks:
      - backend-network
    volumes:
      - zookeeper-data:/bitnami/zookeeper
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 150s

  kafka:
    image: bitnami/kafka:3.6
    container_name: kafka
    restart: always
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 150s
    networks:
      - backend-network

  # ==========================================================
  # Microservices
  # ==========================================================

  # Eureka Server - Service Discovery
  eureka-server:
    build: ./eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - backend-network
    environment:
      - EUREKA_HOST=${EUREKA_HOST}
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 150s

  # API Gateway
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    env_file:
      - .env
    environment:
      - EUREKA_HOST=${EUREKA_HOST}
      - KEYCLOAK_HOST=${KEYCLOAK_HOST}
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
    ports:
      - "8888:8888"
    depends_on:
      eureka-server:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - backend-network

  # Member Service
  member-service:
    build: ./member-service
    container_name: member-service
    ports:
      - "9993:9993"
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - backend-network
    environment:
      - EUREKA_HOST=${EUREKA_HOST}
      - DATASOURCE_HOST=${DATASOURCE_HOST}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - KAFKA_SERVER=${KAFKA_SERVER}
      - KEYCLOAK_HOST=${KEYCLOAK_HOST}
      - KEYCLOAK_ADMIN_USERNAME=${KEYCLOAK_ADMIN_USERNAME}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}

  # Catalog Service
  catalog-service:
    build: ./catalog-service
    container_name: catalog-service
    env_file:
      - .env
    ports:
      - "9991:9991"
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - backend-network
    environment:
      - EUREKA_HOST=${EUREKA_HOST}
      - DATASOURCE_HOST=${DATASOURCE_HOST}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - KAFKA_SERVER=${KAFKA_SERVER}
      - KEYCLOAK_HOST=${KEYCLOAK_HOST}

  # Loan Service
  loan-service:
    build: ./loan-service
    container_name: loan-service
    ports:
      - "9995:9995"
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - backend-network
    environment:
      - EUREKA_HOST=${EUREKA_HOST}
      - DATASOURCE_HOST=${DATASOURCE_HOST}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - KAFKA_SERVER=${KAFKA_SERVER}
      - KEYCLOAK_HOST=${KEYCLOAK_HOST}

  # Notification Service
  notification-service:
    build: ./notification-service
    container_name: notification-service
    ports:
      - "9994:9994"
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - backend-network
    environment:
      - EUREKA_HOST=${EUREKA_HOST}
      - DATASOURCE_HOST=${DATASOURCE_HOST}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - KAFKA_SERVER=${KAFKA_SERVER}
      - KEYCLOAK_HOST=${KEYCLOAK_HOST}

  # Dashboard Service
  dashboard-service:
    build: ./dashboard-service
    container_name: dashboard-service
    ports:
      - "9992:9992"
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - backend-network
    environment:
      - EUREKA_HOST=${EUREKA_HOST}
      - DATASOURCE_HOST=${DATASOURCE_HOST}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - KAFKA_SERVER=${KAFKA_SERVER}
      - KEYCLOAK_HOST=${KEYCLOAK_HOST}
